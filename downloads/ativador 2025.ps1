<#
    Vers√£o: 3.6 - Criado por Marcos (com op√ß√£o de REDE adicionada)
    Data: 14/08/2025

    Como Usar:
    Execute-o no PowerShell com permiss√µes de administrador.
    Responda √†s perguntas pressionando "1" para "Sim" ou "2" para "N√£o".
    
#>

# Defini√ß√£o de cores
$corTitulo   = "Yellow"
$corDestaque = "Cyan"
$corAlerta   = "Red"

# Fun√ß√£o para exibir mensagens
function Show-Message {
    param (
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host -ForegroundColor $Color $Message
}

# Limpar a tela no in√≠cio
Clear-Host

# Cabe√ßalho
Show-Message "====================================" $corDestaque
Show-Message "       üöÄ SCRIPT MARCOS v3.6         " $corTitulo
Show-Message "       Criado por Marcos             " $corTitulo
Show-Message "====================================" $corDestaque

# Verifica se √© administrador
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Show-Message "üîÑ Elevando privil√©gios..." $corDestaque
    Start-Process powershell.exe -ArgumentList ("-NoProfile -ExecutionPolicy Bypass -File `"{0}`"" -f $PSCommandPath) -Verb RunAs -Wait
    exit
}

Show-Message "‚úÖ Script com privil√©gios de administrador!" $corTitulo

# Fun√ß√£o gen√©rica para baixar, executar e limpar
function Download-Execute-And-Clean {
    param (
        [string]$Url,
        [string]$FileName,
        [string]$ProcessName
    )

    $filePath = Join-Path -Path $env:TEMP -ChildPath $FileName
    Show-Message "üì• Baixando $FileName..." $corDestaque

    try {
        Invoke-WebRequest -Uri $Url -OutFile $filePath -ErrorAction Stop
        Show-Message "‚úÖ Download conclu√≠do!" $corTitulo
        Show-Message "üîß Executando $FileName..." $corDestaque
        Start-Process -FilePath $filePath -Wait

        # Fechar o processo se ainda estiver ativo
        if (Get-Process -Name $ProcessName -ErrorAction SilentlyContinue) {
            Stop-Process -Name $ProcessName -Force
            Show-Message "üõë Processo $ProcessName fechado." $corDestaque
        }

        Remove-Item -Path $filePath -Force
        Show-Message "üóëÔ∏è Arquivo removido." $corDestaque
    }
    catch {
        Show-Message "‚ùå Erro ao baixar ou executar $($FileName): $_" $corAlerta
    }
}

# Fun√ß√£o para obter a escolha do usu√°rio (1 ou 2) sem precisar de Enter
function Get-Choice {
    param (
        [string]$Prompt
    )
    Show-Message $Prompt $corDestaque
    while ($true) {
        $key = [System.Console]::ReadKey($true)
        if ($key.KeyChar -eq '1') { return '1' }
        elseif ($key.KeyChar -eq '2') { return '2' }
        else { Show-Message "‚ùå Op√ß√£o inv√°lida. Pressione 1 ou 2." $corAlerta }
    }
}

# Pergunta sobre o Office
Show-Message ""
$respostaOffice = Get-Choice "Deseja instalar o Office? (1 - Sim / 2 - N√£o)"
if ($respostaOffice -eq '1') {
    Download-Execute-And-Clean -Url "https://marcosantoniorapado.github.io/downloads/OfficeSetup.exe" -FileName "OfficeSetup.exe" -ProcessName "OfficeSetup"
} else {
    Show-Message "‚è≠Ô∏è Pulando instala√ß√£o do Office." $corDestaque
}
Clear-Host

# Pergunta sobre o Ninite
Show-Message ""
$respostaNinite = Get-Choice "Deseja instalar AnyDesk, Chrome, Firefox e WinRAR via Ninite? (1 - Sim / 2 - N√£o)"
if ($respostaNinite -eq '1') {
    Download-Execute-And-Clean -Url "https://marcosantoniorapado.github.io/downloads/Ninite%20AnyDesk%20Chrome%20Firefox%20WinRAR%20Installer.exe" -FileName "NiniteInstaller.exe" -ProcessName "NiniteInstaller"
} else {
    Show-Message "‚è≠Ô∏è Pulando instala√ß√£o via Ninite." $corDestaque
}
Clear-Host

# Pergunta sobre o Windows Utilit√°rio
Show-Message ""
$respostaUtilitario = Get-Choice "Deseja baixar o Windows Utilit√°rio? (1 - Sim / 2 - N√£o)"
if ($respostaUtilitario -eq '1') {
    Show-Message "üì• Baixando e executando Windows Utilit√°rio..." $corDestaque
    $scriptUrl = "https://github.com/memstechtips/Winhance/raw/main/Winhance.ps1"
    $scriptPath = Join-Path -Path $env:TEMP -ChildPath "Winhance.ps1"
    try {
        Invoke-WebRequest -Uri $scriptUrl -OutFile $scriptPath -ErrorAction Stop
        Show-Message "‚úÖ Download conclu√≠do!" $corTitulo
        Show-Message "üîß Executando Windows Utilit√°rio em um novo processo..." $corDestaque
        Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`"" -Wait
        Show-Message "‚úÖ Windows Utilit√°rio executado com sucesso!" $corTitulo
    } catch {
        Show-Message "‚ùå Erro ao baixar ou executar o Windows Utilit√°rio: $_" $corAlerta
    } finally {
        if (Test-Path $scriptPath) {
            Remove-Item -Path $scriptPath -Force
            Show-Message "üóëÔ∏è Arquivo tempor√°rio removido." $corDestaque
        }
    }
} else {
    Show-Message "‚è≠Ô∏è Pulando Windows Utilit√°rio." $corDestaque
}
Clear-Host

# === PEN√öLTIMA PERGUNTA: Configura√ß√£o de REDE (SMB) ==========================
Show-Message ""
Show-Message "‚ö†Ô∏è Esta op√ß√£o ajusta o cliente SMB para compatibilidade com compartilhamentos antigos. Use apenas em redes confi√°veis." $corAlerta
$respostaRede = Get-Choice "Executar configura√ß√£o de REDE? (1 - Sim / 2 - N√£o)"
if ($respostaRede -eq '1') {
    try {
        Set-SmbClientConfiguration -RequireSecuritySignature $false -Force | Out-Null
        Set-SmbClientConfiguration -EnableInsecureGuestLogons $true -Force | Out-Null
        Show-Message "‚úÖ Configura√ß√µes SMB aplicadas." $corTitulo
        Show-Message "üîé Status atual:" $corDestaque
        Get-SmbClientConfiguration | Select-Object RequireSecuritySignature, EnableInsecureGuestLogons | Format-List
    }
    catch {
        Show-Message "‚ùå Falha ao aplicar configura√ß√µes SMB. Execute como Administrador." $corAlerta
        Show-Message $_.Exception.Message $corAlerta
    }
} else {
    Show-Message "‚è≠Ô∏è Configura√ß√£o de rede ignorada." $corDestaque
}
Clear-Host
# ==========================================================================

# Baixa e executa o segundo script (√öLTIMA a√ß√£o antes da finaliza√ß√£o)
Show-Message ""
$respostaUltimo = Get-Choice "Deseja baixar e executar o Programa de Ativa√ß√£o? (1 - Sim / 2 - N√£o)"
if ($respostaUltimo -eq '1') {
    Show-Message "üì• Baixando programa Ativa√ß√£o..." $corDestaque
    try {
        $secondScriptContent = Invoke-RestMethod -Uri "https://get.activated.win" -ErrorAction Stop
        Show-Message "‚úÖ  Programa Ativa√ß√£o baixado!" $corTitulo
        Show-Message "üîß Executando programa Ativa√ß√£o..." $corDestaque
        Invoke-Expression $secondScriptContent
        Show-Message "‚úÖ Programa Ativa√ß√£o conclu√≠do!" $corTitulo
    }
    catch {
        Show-Message "‚ùå Erro ao executar o √∫ltimo programa: $_" $corAlerta
    }
} else {
    Show-Message "‚è≠Ô∏è Programa Ativa√ß√£o ignorado." $corDestaque
}

# Finaliza√ß√£o
Show-Message "üîö Script conclu√≠do!" $corDestaque
Start-Sleep -Seconds 1
Clear-History
exit
